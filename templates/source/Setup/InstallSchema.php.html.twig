{% if module.getMagentoVersion() == '2.2' %}
<?php{{ module.getFormattedLicense('php') }}
namespace {{ module.getNamespace() }}\{{ module.getModuleName() }}\Setup;

use Magento\Framework\DB\Adapter\AdapterInterface;
use Magento\Framework\DB\Ddl\Table;
use Magento\Framework\Setup\InstallSchemaInterface;
use Magento\Framework\Setup\ModuleContextInterface;
use Magento\Framework\Setup\SchemaSetupInterface;

class InstallSchema implements InstallSchemaInterface
{
    /**
     * install tables
     *
     * @param SchemaSetupInterface $setup
     * @param ModuleContextInterface $context
     * @return void
     */
    public function install(SchemaSetupInterface $setup, ModuleContextInterface $context)
    {
        $installer = $setup;
        $installer->startSetup();
{% for entity in module.getEntities() %}
        $this->create{{ entity.getNameSingular()|ucfirst }}Table($setup);
{% if entity.getStore() %}
        $this->create{{ entity.getNameSingular()|ucfirst }}StoreTable($setup);
{% endif %}
{% endfor %}
        $installer->endSetup();
    }
{% for entity in module.getEntities() %}

    /**
     * install table for {{ entity.getLabelSingular() }}
     *
     * @param SchemaSetupInterface $setup
     * @throws \Zend_Db_Exception
     * @SuppressWarnings(PHPMD.ExcessiveMethodLength)
     */
    private function create{{ entity.getNameSingular()|ucfirst }}Table(SchemaSetupInterface $setup)
    {
        if (!$setup->tableExists('{{ module.getNamespace()|snake }}_{{ module.getModuleName()|snake }}_{{ entity.getNameSingular()|snake }}')) {
            $table = $setup->getConnection()->newTable(
                $setup->getTable('{{ module.getNamespace()|snake }}_{{ module.getModuleName()|snake }}_{{ entity.getNameSingular()|snake }}')
            )
            ->addColumn(
                '{{ entity.getNameSingular()|snake }}_id',
                Table::TYPE_INTEGER,
                null,
                [
                    'identity' => true,
                    'nullable' => false,
                    'primary'  => true,
                    'unsigned' => true,
                ],
                '{{ entity.getLabelSingular()|ucfirst }} ID'
            )
{%  for attribute in entity.getAttributes() %}
            ->addColumn(
                '{{ attribute.getCode() }}',
                Table::{{ attribute.getTypeInstance().getSqlTypeConstant() }},
                {{ attribute.getTypeInstance().getSqlSize()|raw }},
{{ attribute.getTypeInstance().getAttributeColumnSettingsString()|raw }},
                '{{ entity.getLabelSingular()|ucfirst }} {{ attribute.getLabel() }}'
            )
{% endfor %}
{% if entity.getFrontendView() or entity.getFrontendList() %}
            ->addColumn(
                'is_active',
                Table::TYPE_INTEGER,
                1,
                [],
                '{{ entity.getLabelSingular() }} Is Enabled'
            )
{% endif %}
{% if entity.getIsTree() %}
            ->addColumn(
                'parent_id',
                Table::TYPE_INTEGER,
                null,
                ['unsigned' => true, 'nullable' => false, 'default' => '0'],
                'Parent {{ entity.getLabelSingular() }} ID'
            )
            ->addColumn(
                'path',
                Table::TYPE_TEXT,
                255,
                ['nullable' => false],
                '{{ entity.getLabelSingular() }} Tree Path'
            )
            ->addColumn(
                'position',
                Table::TYPE_INTEGER,
                null,
                ['nullable' => false],
                '{{ entity.getLabelSingular() }} Position'
            )
            ->addColumn(
                'level',
                Table::TYPE_INTEGER,
                null,
                ['nullable' => false, 'default' => '0'],
                '{{ entity.getLabelSingular() }} Tree Level'
            )
            ->addColumn(
                'children_count',
                Table::TYPE_INTEGER,
                null,
                ['nullable' => false],
                '{{ entity.getLabelSingular() }} Child Count'
            )
{% endif %}
{% if entity.getSeo() %}
            ->addColumn(
                'meta_title',
                Table::TYPE_TEXT,
                255,
                [],
                '{{ entity.getLabelSingular() }} Meta Title'
            )
            ->addColumn(
                'meta_description',
                Table::TYPE_TEXT,
                '2M',
                [],
                '{{ entity.getLabelSingular() }} Meta Description'
            )
            ->addColumn(
                'meta_keywords',
                Table::TYPE_TEXT,
                '2M',
                [],
                '{{ entity.getLabelSingular() }} Meta Keywords'
            )
{% endif %}
            ->addColumn(
                'created_at',
                Table::TYPE_TIMESTAMP,
                null,
                [
                    'nullable' => false,
                    'default' => Table::TIMESTAMP_INIT
                ],
                '{{ entity.getLabelSingular()|ucfirst }} Created At'
            )
            ->addColumn(
                'updated_at',
                Table::TYPE_TIMESTAMP,
                null,
                [
                    'nullable' => false,
                    'default' => Table::TIMESTAMP_INIT_UPDATE
                ],
                '{{ entity.getLabelSingular()|ucfirst }} Updated At'
            )
{% if entity.getIsTree() %}
            ->addIndex(
                $installer->getIdxName(
                    '{{ module.getNamespace()|snake }}_{{ module.getModuleName()|snake }}_{{ entity.getNameSingular()|snake }}',
                    ['level']
                ),
                ['level']
            )
            ->addIndex(
                $installer->getIdxName(
                    '{{ module.getNamespace()|snake }}_{{ module.getModuleName()|snake }}_{{ entity.getNameSingular()|snake }}',
                    ['path']
                ),
                ['path']
            )
{% endif %}
{%  for attribute in entity.getAttributes() %}{{ attribute.getTypeInstance().renderFk()|raw }}{% endfor %}
            ->setComment('{{ entity.getLabelSingular()|ucfirst }} Table');
            $setup->getConnection()->createTable($table);
{% if entity.getAttributesWithTypeConfig('full_text')|length > 0 %}
            $setup->getConnection()->addIndex(
                $setup->getTable('{{ module.getNamespace()|snake }}_{{ module.getModuleName()|snake }}_{{ entity.getNameSingular()|snake }}'),
                $setup->getIdxName(
                    $setup->getTable('{{ module.getNamespace()|snake }}_{{ module.getModuleName()|snake }}_{{ entity.getNameSingular()|snake }}'),
                    [
{{ entity.getAttributesWithTypeConfigString('full_text', 6)|raw }}
                    ],
                    AdapterInterface::INDEX_TYPE_FULLTEXT
                ),
                [
{{ entity.getAttributesWithTypeConfigString('full_text', 5)|raw }}
                ],
                AdapterInterface::INDEX_TYPE_FULLTEXT
            );
{% endif %}
        }
    }
{% if entity.getStore() %}

    /**
     * install table for {{ entity.getLabelSingular() }} store link
     *
     * @param SchemaSetupInterface $setup
     * @throws \Zend_Db_Exception
     * @SuppressWarnings(PHPMD.ExcessiveMethodLength)
    */
    private function create{{ entity.getNameSingular()|ucfirst }}StoreTable(SchemaSetupInterface $setup)
    {
        if (!$setup->tableExists('{{ module.getNamespace()|snake }}_{{ module.getModuleName()|snake }}_{{ entity.getNameSingular()|snake }}_store')) {
            $table = $setup->getConnection()->newTable(
                $setup->getTable('{{ module.getNamespace()|snake }}_{{ module.getModuleName()|snake }}_{{ entity.getNameSingular()|snake }}_store')
            )->addColumn(
                '{{ entity.getNameSingular()|snake }}_id',
                Table::TYPE_INTEGER,
                null,
                ['nullable' => false, 'primary' => true, 'unsigned' => true],
                '{{ entity.getLabelSingular()|ucfirst }} ID'
            )->addColumn(
                'store_id',
                Table::TYPE_SMALLINT,
                null,
                ['unsigned' => true, 'nullable' => false, 'primary' => true],
                'Store ID'
            )->addIndex(
                $setup->getIdxName('{{ module.getNamespace()|snake }}_{{ module.getModuleName()|snake }}_{{ entity.getNameSingular()|snake }}_store', ['store_id']),
                ['store_id']
            )->addForeignKey(
                $setup->getFkName(
                    '{{ module.getNamespace()|snake }}_{{ module.getModuleName()|snake }}_{{ entity.getNameSingular()|snake }}_store',
                    '{{ entity.getNameSingular()|snake }}_id',
                    '{{ module.getNamespace()|snake }}_{{ module.getModuleName()|snake }}_{{ entity.getNameSingular()|snake }}',
                    '{{ entity.getNameSingular()|snake }}_id'
                ),
                '{{ entity.getNameSingular()|snake }}_id',
                $setup->getTable('{{ module.getNamespace()|snake }}_{{ module.getModuleName()|snake }}_{{ entity.getNameSingular()|snake }}'),
                '{{ entity.getNameSingular()|snake }}_id',
                Table::ACTION_CASCADE
            )->addForeignKey(
                $setup->getFkName(
                    '{{ module.getNamespace()|snake }}_{{ module.getModuleName()|snake }}_{{ entity.getNameSingular()|snake }}_store',
                    'store_id',
                    'store',
                    'store_id'
                ),
                'store_id',
                $setup->getTable('store'),
                'store_id',
                Table::ACTION_CASCADE
            )->setComment('{{ entity.getLabelSingular()|ucfirst }} To Store Linkage Table');
            $setup->getConnection()->createTable($table);
        }
    }
{% endif %}
{% endfor %}
}
{% endif %}
