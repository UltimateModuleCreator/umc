<?xml version="1.0"?>{{ module.getFormattedLicense('xml')|raw }}
<config xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="urn:magento:framework:ObjectManager/etc/config.xsd">
{% for entity in module.getEntities() %}
{% include 'entity/di/preference.html.twig' with {module: module, entity:entity} %}
{% endfor %}
    <type name="Magento\Framework\EntityManager\MetadataPool">
        <arguments>
            <argument name="metadata" xsi:type="array">
{% for entity in module.getEntities() %}
                <item name="{{ module.getNamespace()|camel|ucfirst }}\{{module.getModuleName()|camel|ucfirst }}\Api\Data\{{ entity.getNameSingular()|camel|ucfirst }}Interface" xsi:type="array">
                    <item name="entityTableName" xsi:type="string">{{ entity.getMainTableName() }}</item>
                    <item name="identifierField" xsi:type="string">{{ entity.getPk() }}</item>
                </item>
{% endfor %}
            </argument>
        </arguments>
    </type>
{% if module.hasSearchableEntities() %}
    <type name="Magento\Backend\Controller\Adminhtml\Index\GlobalSearch">
        <arguments>
            <argument name="searchModules" xsi:type="array">
{% for entity in module.getSearchableEntities() %}
                <item name="{{ module.getNamespace()|snake }}_{{module.getModuleName()|snake }}_{{ entity.getNameSingular()|snake }}" xsi:type="array">
                    <item name="class" xsi:type="string">{{ entity.getSearchModel() }}</item>
                    <item name="acl" xsi:type="string">{{ entity.getAclName() }}</item>
                </item>
{% endfor %}
            </argument>
        </arguments>
    </type>
{% endif %}
    <!-- configure resource models -->
{% for entity in module.getEntities() %}
    <type name="{{ entity.getResourceModel() }}">
        <arguments>
{% if entity.isStore() %}
            <argument name="storeTable" xsi:type="string">{{ entity.getStoreTableName() }}</argument>
{% endif %}
            <argument name="interfaceClass" xsi:type="string">{{ entity.getInterface() }}</argument>
        </arguments>
    </type>
{% endfor %}
    <type name="Magento\Framework\View\Element\UiComponent\DataProvider\CollectionFactory">
        <arguments>
            <argument name="collections" xsi:type="array">
{% for entity in module.getEntities() %}
                <item name="{{module.getModuleName()|camel|lower }}_{{ entity.getNameSingular()|camel|lower }}_listing_data_source" xsi:type="string">{{ module.getNamespace() }}{{module.getModuleName() }}{{ entity.getNameSingular()|camel|ucfirst }}GridCollection</item>
{% endfor %}
            </argument>
        </arguments>
    </type>
{% for entity in module.getEntities() %}
{% include 'entity/di/collection.html.twig' with {module: module, entity:entity} %}
{% endfor %}
{% for entity in module.getStoreEntities() %}
{% include 'entity/di/store-link.html.twig' with {module: module, entity:entity} %}
{% endfor %}
{% if module.isStore() %}
    <type name="Magento\Framework\EntityManager\Operation\ExtensionPool">
        <arguments>
            <argument name="extensionActions" xsi:type="array">
{% for entity in module.getStoreEntities() %}
{% include 'entity/di/store-handlers.html.twig' with {module: module, entity:entity} %}
{% endfor %}
            </argument>
        </arguments>
    </type>
{% endif %}
{% for entity in module.getImageEntities() %}
    <virtualType name="{{ entity.getUploadInfoModel('Image') }}" type="{{ module.getUmcCrudNamespace() }}\{{ module.getUmcModuleName() }}\Model\FileInfo">
        <arguments>
            <argument name="filePath" xsi:type="string">{{ entity.getUploadFolder('image') }}</argument>
        </arguments>
    </virtualType>
{% endfor %}
{% for entity in module.getFileEntities() %}
    <virtualType name="{{ entity.getUploadInfoModel('File') }}" type="{{ module.getUmcCrudNamespace() }}\{{ module.getUmcModuleName() }}\Model\FileInfo">
        <arguments>
            <argument name="filePath" xsi:type="string">{{ entity.getUploadFolder('file') }}</argument>
        </arguments>
    </virtualType>
{% endfor %}
{% for entity in module.getEntities() %}
{% for attribute in entity.getOptionAttributes() %}
    <virtualType name="{{ attribute.getOptionSourceVirtualType() }}" type="{{ module.getUmcCrudNamespace() }}\{{ module.getUmcModuleName() }}\Source\Options">
        <arguments>
            <argument name="options" xsi:type="array">
{% for option in attribute.getOptions() %}
                <item name="{{ option.getValue() }}" xsi:type="array">
                    <item name="value" xsi:type="{{ attribute.getOptionType() }}">{{ option.getValue() }}</item>
                    <item name="label" xsi:type="string" translatable="true">{{ option.getLabel() }}</item>
                </item>
{% endfor %}
            </argument>
        </arguments>
    </virtualType>
{% endfor %}
{% for attribute in entity.getAttributesWithType('serialized') %}
{% for serialized in attribute.getSerializedWithOptions() %}
    <virtualType name="{{ serialized.getOptionSourceVirtualType() }}" type="{{ module.getUmcCrudNamespace() }}\{{ module.getUmcModuleName() }}\Source\Options">
        <arguments>
            <argument name="options" xsi:type="array">
{% for option in serialized.getOptions() %}
                    <item name="{{ option.getValue() }}" xsi:type="array">
                        <item name="value" xsi:type="{{ serialized.getOptionType() }}">{{ option.getValue() }}</item>
                        <item name="label" xsi:type="string" translatable="true">{{ option.getLabel() }}</item>
                    </item>
{% endfor %}
            </argument>
        </arguments>
    </virtualType>
{% endfor %}
{% endfor %}
{% endfor %}
</config>
