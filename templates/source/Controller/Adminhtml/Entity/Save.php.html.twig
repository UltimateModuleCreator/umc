<?php{{ module.getFormattedLicense('php') }}
namespace {{ module.getNamespace() }}\{{ module.getModuleName() }}\Controller\Adminhtml\{{ entity.getNameSingular()|camel|ucfirst }};

use {{ module.getNamespace() }}\{{ module.getModuleName() }}\Api\{{ entity.getNameSingular()|camel|ucfirst }}RepositoryInterface;
use {{ module.getNamespace() }}\{{ module.getModuleName() }}\Api\Data\{{ entity.getNameSingular()|camel|ucfirst }}Interface;
use {{ module.getNamespace() }}\{{ module.getModuleName() }}\Api\Data\{{ entity.getNameSingular()|camel|ucfirst }}InterfaceFactory;
use Magento\Backend\App\Action;
use Magento\Backend\App\Action\Context;
use Magento\Framework\Api\DataObjectHelper;
use Magento\Framework\App\Request\DataPersistorInterface;
use Magento\Framework\Exception\LocalizedException;
use Magento\Framework\Reflection\DataObjectProcessor;
use Magento\Framework\Registry;
{% if entity.hasAttributeType('image') or entity.hasAttributeType('file') %}
use {{ module.getNamespace() }}\{{ module.getModuleName() }}\Model\UploaderPool;
{% endif %}
{% if entity.hasAttributeType('date') %}
use {{ module.getNamespace() }}\{{ module.getModuleName() }}\Model\DateFilter;
{% endif %}

/**
 * Class Save
 * @SuppressWarnings(PHPMD.CouplingBetweenObjects)
 */
class Save extends Action
{
    /**
     * {{ entity.getLabelSingular()|ucfirst }} factory
     * @var {{ entity.getNameSingular()|ucfirst }}InterfaceFactory
     */
    protected ${{ entity.getNameSingular()|camel }}Factory;
    /**
     * Data Object Processor
     * @var DataObjectProcessor
     */
    protected $dataObjectProcessor;
    /**
     * Data Object Helper
     * @var DataObjectHelper
     */
    protected $dataObjectHelper;
    /**
     * Data Persistor
     * @var DataPersistorInterface
     */
    protected $dataPersistor;
{% if entity.hasAttributeType('image') or entity.hasAttributeType('file') %}
    /**
     * Uploader pool
     * @var UploaderPool
     */
    protected $uploaderPool;
{% endif %}
{% if entity.hasAttributeType('date') %}
    /**
     * Date inputs filter
     * @var DateFilter
     */
    protected $dateFilter;
{% endif %}
    /**
     * Core registry
     * @var Registry
     */
    protected $registry;
    /**
     * {{ entity.getLabelSingular()|ucfirst }} repository
     * @var {{ entity.getNameSingular()|ucfirst }}RepositoryInterface
     */
    protected ${{ entity.getNameSingular()|snake }}Repository;

    /**
     * Save constructor.
     * @param Context $context
     * @param {{ entity.getNameSingular()|camel|ucfirst }}InterfaceFactory ${{ entity.getNameSingular()|camel }}Factory
     * @param {{ entity.getNameSingular()|camel|ucfirst }}RepositoryInterface ${{ entity.getNameSingular()|camel }}Repository
     * @param DataObjectProcessor $dataObjectProcessor
     * @param DataObjectHelper $dataObjectHelper
     * @param DataPersistorInterface $dataPersistor
{% if entity.hasAttributeType('image') or entity.hasAttributeType('file') %}
     * @param UploaderPool $uploaderPool
{% endif %}
{% if entity.hasAttributeType('date') %}
     * @param DateFilter $dateFilter
{% endif %}
     * @param Registry $registry
     */
    public function __construct(
        Context $context,
        {{ entity.getNameSingular()|camel|ucfirst }}InterfaceFactory ${{ entity.getNameSingular()|camel }}Factory,
        {{ entity.getNameSingular()|camel|ucfirst }}RepositoryInterface ${{ entity.getNameSingular()|camel }}Repository,
        DataObjectProcessor $dataObjectProcessor,
        DataObjectHelper $dataObjectHelper,
        DataPersistorInterface $dataPersistor,
{% if entity.hasAttributeType('image') or entity.hasAttributeType('file') %}
        UploaderPool $uploaderPool,
{% endif %}
{% if entity.hasAttributeType('date') %}
        DateFilter $dateFilter,
{% endif %}
        Registry $registry
    ) {
        $this->{{ entity.getNameSingular()|camel }}Factory = ${{ entity.getNameSingular()|camel }}Factory;
        $this->{{ entity.getNameSingular()|camel }}Repository = ${{ entity.getNameSingular()|camel }}Repository;
        $this->dataObjectProcessor = $dataObjectProcessor;
        $this->dataObjectHelper = $dataObjectHelper;
        $this->dataPersistor = $dataPersistor;
        $this->registry = $registry;
{% if entity.hasAttributeType('image') or entity.hasAttributeType('file') %}
        $this->uploaderPool = $uploaderPool;
{% endif %}
{% if entity.hasAttributeType('date')%}
        $this->dateFilter = $dateFilter;
{% endif %}
        parent::__construct($context);
    }

    /**
     * run the action
     *
     * @return \Magento\Framework\Controller\Result\Redirect
     */
    public function execute()
    {
        /** @var {{ entity.getNameSingular()|ucfirst }}Interface ${{ entity.getNameSingular()|snake }} */
        ${{ entity.getNameSingular()|camel }} = null;
        $postData = $this->getRequest()->getPostValue();
        $data = $postData;
{% if entity.hasAttributeType('date') %}
        $data = $this->dateFilter->filterDates(
            $data,
            [
{{ entity.getAttributesWithTypeString('date', 4)|raw }}
            ]
        );
{% endif %}
        $id = !empty($data['{{ entity.getNameSingular()|snake }}_id']) ? $data['{{ entity.getNameSingular()|snake }}_id'] : null;
        $resultRedirect = $this->resultRedirectFactory->create();
        try {
            if ($id) {
                ${{ entity.getNameSingular()|camel }} = $this->{{ entity.getNameSingular()|camel }}Repository->get((int)$id);
            } else {
                unset($data['{{ entity.getNameSingular()|snake }}_id']);
                ${{ entity.getNameSingular()|camel }} = $this->{{ entity.getNameSingular()|camel }}Factory->create();
            }
{% for attribute in entity.getAttributes() %}
{% if attribute.getType() == "image"  or attribute.getType() == "file" %}
            ${{ attribute.getCode()|camel }} = $this->uploaderPool->getUploader('{{ attribute.getType() }}')->uploadFileAndGetName('{{ attribute.getCode()|snake }}', $data);
            $data['{{ attribute.getCode()|snake }}'] = ${{ attribute.getCode()|camel }};
{% endif %}
{% endfor %}
            $this->dataObjectHelper->populateWithArray(${{ entity.getNameSingular()|camel }}, $data, {{ entity.getNameSingular()|camel|ucfirst }}Interface::class);
            $this->{{ entity.getNameSingular()|camel }}Repository->save(${{ entity.getNameSingular()|camel }});
            $this->messageManager->addSuccessMessage(__('You saved the {{ entity.getLabelSingular() }}'));
            $this->dataPersistor->clear('{{ module.getNamespace()|snake }}_{{ module.getModuleName()|snake }}_{{ entity.getNameSingular()|snake }}');
            if ($this->getRequest()->getParam('back')) {
                $resultRedirect->setPath('*/*/edit', ['{{ entity.getNameSingular()|snake }}_id' => ${{ entity.getNameSingular()|camel }}->getId()]);
            } else {
                $resultRedirect->setPath('*/*');
            }
        } catch (LocalizedException $e) {
            $this->messageManager->addErrorMessage($e->getMessage());
            $this->dataPersistor->set('{{ module.getNamespace()|snake }}_{{ module.getModuleName()|snake }}_{{ entity.getNameSingular()|snake }}', $postData);
            $resultRedirect->setPath('*/*/edit', ['{{ entity.getNameSingular()|snake }}_id' => $id]);
        } catch (\Exception $e) {
            $this->messageManager->addErrorMessage(__('There was a problem saving the {{ entity.getLabelSingular() }}'));
            $this->dataPersistor->set('{{ module.getNamespace()|snake }}\{{ module.getModuleName()|snake }}_{{ entity.getNameSingular()|snake }}', $postData);
            $resultRedirect->setPath('*/*/edit', ['{{ entity.getNameSingular()|snake }}_id' => $id]);
        }
        return $resultRedirect;
    }
}
