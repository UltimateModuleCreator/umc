<?php{{ module.getFormattedLicense('php') }}
declare(strict_types=1);
namespace {{ module.getNamespace() }}\{{ module.getModuleName() }}\Controller\Adminhtml\{{ entity.getNameSingular()|camel|ucfirst }};

use {{ module.getNamespace() }}\{{ module.getModuleName() }}\Api\{{ entity.getNameSingular()|camel|ucfirst }}RepositoryInterface;
use {{ module.getNamespace() }}\{{ module.getModuleName() }}\Api\Data\{{ entity.getNameSingular()|camel|ucfirst }}Interface;
use {{ module.getNamespace() }}\{{ module.getModuleName() }}\Model\ResourceModel\{{ entity.getNameSingular()|camel|ucfirst }} as {{ entity.getNameSingular()|camel|ucfirst }}ResourceModel;
use Magento\Backend\App\Action;
use Magento\Backend\App\Action\Context;
use Magento\Framework\Api\DataObjectHelper;
use Magento\Framework\Controller\ResultFactory;
use Magento\Framework\Exception\LocalizedException;
{% if entity.hasAttributeType('date') %}
use {{ module.getNamespace() }}\{{ module.getModuleName() }}\Model\DateFilter;
{% endif %}

/**
 * Class InlineEdit
 */
class InlineEdit extends Action
{
    /**
     * {{ entity.getLabelSingular()|ucfirst }} repository
     * @var {{ entity.getNameSingular()|camel|ucfirst }}RepositoryInterface
     */
    private ${{ entity.getNameSingular()|snake }}Repository;
    /**
     * Data object processor
     * @var DataObjectHelper
     */
    private $dataObjectHelper;
{% if entity.hasAttributeType('date') %}
    /**
     * Date inputs filter
     * @var DateFilter
     */
    private $dateFilter;
{% endif %}
    /**
     * {{ entity.getLabelSingular()|ucfirst }} resource model
     * @var {{ entity.getNameSingular()|camel|ucfirst }}ResourceModel
     */
    private ${{ entity.getNameSingular()|camel }}ResourceModel;

    /**
     * constructor
     * @param Context $context
     * @param {{ entity.getNameSingular()|camel|ucfirst }}RepositoryInterface ${{ entity.getNameSingular()|camel }}Repository
     * @param DataObjectHelper $dataObjectHelper
     * @param {{ entity.getNameSingular()|camel|ucfirst }}ResourceModel ${{ entity.getNameSingular()|camel }}ResourceModel
     */
    public function __construct(
        Context $context,
        {{ entity.getNameSingular()|camel|ucfirst }}RepositoryInterface ${{ entity.getNameSingular()|camel }}Repository,
        DataObjectHelper $dataObjectHelper,
{% if entity.hasAttributeType('date') %}
        DateFilter $dateFilter,
{% endif %}
        {{ entity.getNameSingular()|camel|ucfirst }}ResourceModel ${{ entity.getNameSingular()|camel }}ResourceModel
    ) {
        $this->{{ entity.getNameSingular()|camel }}Repository = ${{ entity.getNameSingular()|camel }}Repository;
        $this->dataObjectHelper = $dataObjectHelper;
{% if entity.hasAttributeType('date')%}
        $this->dateFilter = $dateFilter;
{% endif %}
        $this->{{ entity.getNameSingular()|camel }}ResourceModel = ${{ entity.getNameSingular()|camel }}ResourceModel;
        parent::__construct($context);
    }

    /**
     * @return \Magento\Framework\Controller\ResultInterface
     */
    public function execute()
    {
        /** @var \Magento\Framework\Controller\Result\Json $resultJson */
        $resultJson = $this->resultFactory->create(ResultFactory::TYPE_JSON);
        $error = false;
        $messages = [];

        $postItems = $this->getRequest()->getParam('items', []);
        if (!($this->getRequest()->getParam('isAjax') && count($postItems))) {
            return $resultJson->setData([
                'messages' => [__('Please correct the data sent.')],
                'error' => true,
            ]);
        }

        foreach (array_keys($postItems) as ${{ entity.getNameSingular()|camel }}Id) {
            /** @var \{{ module.getNamespace() }}\{{ module.getModuleName() }}\Model\{{ entity.getNameSingular()|camel|ucfirst }} */
            try {
                ${{ entity.getNameSingular()|camel }} = $this->{{ entity.getNameSingular()|camel }}Repository->get((int)${{ entity.getNameSingular()|camel }}Id);
                ${{ entity.getNameSingular()|camel }}Data = $postItems[${{ entity.getNameSingular()|camel }}Id];
{% if entity.hasAttributeType('date') %}
                ${{ entity.getNameSingular()|camel }}Data = $this->dateFilter->filterDates(
                    ${{ entity.getNameSingular()|camel }}Data,
                    [
{{ entity.getAttributesWithTypeString('date', 6)|raw }}
                    ]
                );
{% endif %}
                $this->dataObjectHelper->populateWithArray(
                    ${{ entity.getNameSingular()|camel }},
                    ${{ entity.getNameSingular()|camel }}Data,
                    {{ entity.getNameSingular()|camel|ucfirst }}Interface::class
                );
                $this->{{ entity.getNameSingular()|camel }}ResourceModel->saveAttribute(
                    ${{ entity.getNameSingular()|camel }},
                    array_keys(${{ entity.getNameSingular()|camel }}Data)
                );
            } catch (LocalizedException $e) {
                $messages[] = $this->getErrorWith{{ entity.getNameSingular()|camel|ucfirst }}Id(
                    ${{ entity.getNameSingular()|camel }}->getId(),
                    $e->getMessage()
                );
                $error = true;
            } catch (\Exception $e) {
                $messages[] = $this->getErrorWith{{ entity.getNameSingular()|camel|ucfirst }}Id(
                    ${{ entity.getNameSingular()|camel }},
                    __('Something went wrong while saving the {{ entity.getLabelSingular()|ucfirst }}.')
                );
                $error = true;
            }
        }

        return $resultJson->setData([
            'messages' => $messages,
            'error' => $error
        ]);
    }

    /**
     * Add {{ entity.getLabelSingular()|ucfirst }} id to error message
     *
     * @param \{{ module.getNamespace() }}\{{ module.getModuleName() }}\Api\Data\{{ entity.getNameSingular()|camel|ucfirst }}Interface ${{ entity.getNameSingular()|camel }}
     * @param string $errorText
     * @return string
     */
    protected function getErrorWith{{ entity.getNameSingular()|camel|ucfirst }}Id(int ${{ entity.getNameSingular()|camel }}Id, $errorText)
    {
        return '[{{ entity.getLabelSingular()|ucfirst }} ID: ' . ${{ entity.getNameSingular()|camel }}Id . '] ' . $errorText;
    }
}
