<?php{{ module.getFormattedLicense('php') }}
declare(strict_types=1);

namespace {{ module.getNamespace() }}\{{ module.getModuleName() }}\Controller\Adminhtml;

use {{ module.getNamespace() }}\{{ module.getModuleName() }}\Ui\Provider\CollectionProviderInterface;
use Magento\Backend\App\Action;
use Magento\Backend\App\Action\Context;
use Magento\Framework\Exception\LocalizedException;
use Magento\Ui\Component\MassAction\Filter;
use {{ module.getNamespace() }}\{{ module.getModuleName() }}\Api\ExecutorInterface;

class AbstractMassAction extends Action
{
    /**
     * Mass Action filter
     * @var Filter
     */
    private $filter;
    /**
     * Collection provider
     * @var CollectionProviderInterface
     */
    private $collectionProvider;
    /**
     * Action success message
     * @var string
     */
    private $successMessage;
    /**
     * Action error message
     * @var string
     */
    private $errorMessage;
    /**
     * @var ExecutorInterface
     */
    private $executor;

    /**
     * constructor
     * @param Context $context
     * @param Filter $filter
     * @param CollectionProviderInterface $collectionProvider
     * @param string $successMessage
     * @param string $errorMessage
     */
    public function __construct(
        Context $context,
        Filter $filter,
        CollectionProviderInterface $collectionProvider,
        ExecutorInterface $executor,
        $successMessage,
        $errorMessage
    ) {
        $this->filter = $filter;
        $this->collectionProvider = $collectionProvider;
        $this->executor = $executor;
        $this->successMessage = $successMessage;
        $this->errorMessage = $errorMessage;
        parent::__construct($context);
    }

    /**
     * execute action
     *
     * @return \Magento\Framework\Controller\Result\Redirect
     */
    public function execute()
    {
        try {
            $collection = $this->filter->getCollection($this->collectionProvider->getCollection());
            $collectionSize = $collection->getSize();
            foreach ($collection as $entity) {
                $this->executor->execute($entity->getId());
            }
            $this->messageManager->addSuccessMessage(__($this->successMessage, $collectionSize));
        } catch (LocalizedException $e) {
            $this->messageManager->addErrorMessage($e->getMessage());
        } catch (\Exception $e) {
            $this->messageManager->addExceptionMessage($e, $this->errorMessage);
        }
        $redirectResult = $this->resultRedirectFactory->create();
        $redirectResult->setPath('*/*/index');
        return $redirectResult;
    }
}
