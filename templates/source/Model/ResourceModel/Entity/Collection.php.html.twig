<?php{{ module.getFormattedLicense('php') }}
namespace {{ module.getNamespace() }}\{{ module.getModuleName() }}\Model\ResourceModel\{{ entity.getNameSingular()|ucfirst }};

use {{ module.getNamespace() }}\{{ module.getModuleName() }}\Model\{{ entity.getNameSingular()|ucfirst }};
use {{ module.getNamespace() }}\{{ module.getModuleName() }}\Model\ResourceModel\AbstractCollection;

class Collection extends AbstractCollection
{

    /**
     * Define resource model
     *
     * @return void
     */
    protected function _construct()
    {
        $this->_init(
            {{ entity.getNameSingular()|ucfirst }}::class,
            \{{ module.getNamespace() }}\{{ module.getModuleName() }}\Model\ResourceModel\{{ entity.getNameSingular()|ucfirst }}::class
        );
{% if entity.getStore() %}
        $this->_map['fields']['store_id'] = 'store_table.store_id';
        $this->_map['fields']['{{ entity.getNameSingular()|snake }}_id'] = 'main_table.{{ entity.getNameSingular()|snake }}_id';
{% endif %}
    }
{% if entity.getAttributesWithTypeConfig('multiple') or entity.getStore() %}

    /**
     * after collection load
     */
    protected function _afterLoad()
    {
{% if entity.getAttributesWithTypeConfig('multiple')  %}
        $fields = [
{{ entity.getAttributesWithTypeConfigString('multiple', 3)|raw }}
        ];
        /** @var {{ entity.getNameSingular()|ucfirst }} $item */
        foreach ($this as $item) {
            foreach ($fields as $field) {
                if (!is_array($item->getData($field))) {
                    $item->setData($field, explode(',', $item->getData($field)));
                }
            }
        }
{% endif %}
{% if entity.getStore() %}
        $ids = [];
        foreach ($this as $item) {
            $ids[] = $item->getId();
        }
        if (count($ids)) {
            $connection = $this->getConnection();
            $select = $connection->select()->from(
                ['store_table' => $this->getTable('{{ module.getNamespace()|snake }}_{{ module.getModuleName()|snake }}_{{ entity.getNameSingular()|snake }}_store')]
            )->where('store_table.{{ entity.getNameSingular()|snake }}_id IN (?)', $ids);
            $result = $connection->fetchAll($select);
            if ($result) {
                $storesData = [];
                foreach ($result as $storeData) {
                    $storesData[$storeData['{{ entity.getNameSingular()|snake }}_id']][] = $storeData['store_id'];
                }
                foreach ($this as $item) {
                    $linkedId = $item->getData('{{ entity.getNameSingular()|snake }}_id');
                    if (!isset($storesData[$linkedId])) {
                        continue;
                    }
                    $item->setData('store_id', $storesData[$linkedId]);
                }
            }
        }
{% endif %}
        return parent::_afterLoad();
    }
{% endif %}
{% if entity.getStore() %}

    /**
     * @param $storeId
     * @return $this
     */
    public function addStoreFilter($storeId)
    {
        if (!isset($this->joinFields['store'])) {
            $this->getSelect()->join(
                [
                    'related_store' => $this->getTable('{{ module.getNamespace()|snake }}_{{ module.getModuleName()|snake }}_{{ entity.getNameSingular()|snake }}_store')
                ],
                'related_store.{{ entity.getNameSingular()|snake }}_id = main_table.{{ entity.getNameSingular()|snake }}_id'
            );
            $this->getSelect()->where('related_store.store_id IN (?)', [$storeId, 0]);
            $this->joinFields['store'] = true;
        }
        return $this;
    }

    /**
     * Join store relation table
     *
     * @return void
     */
    protected function _renderFiltersBefore()
    {
        $this->getSelect()->join(
            ['store_table' => $this->getTable('{{ module.getNamespace()|snake }}_{{ module.getModuleName()|snake }}_{{ entity.getNameSingular()|snake }}_store')],
            'main_table.{{ entity.getNameSingular()|snake }}_id = store_table.{{ entity.getNameSingular()|snake }}_id',
            []
        )->group(
            'main_table.{{ entity.getNameSingular()|snake }}_id'
        );
        parent::_renderFiltersBefore();
    }
{% endif %}
}
