<?php{{ module.getFormattedLicense('php') }}
namespace {{ module.getNamespace() }}\{{ module.getModuleName() }}\Model;

use {{ module.getNamespace() }}\{{ module.getModuleName() }}\Api\Data\{{ entity.getNameSingular()|ucfirst }}Interface;
use Magento\Framework\Model\AbstractModel;
use {{ module.getNamespace() }}\{{ module.getModuleName() }}\Model\ResourceModel\{{ entity.getNameSingular()|ucfirst }} as {{ entity.getNameSingular()|ucfirst }}ResourceModel;
{% if (entity.hasAttributeType('wysiwyg') and (entity.getFrontendView() or entity.getFrontendList())) or ( entity.hasAttributeType('file') or entity.hasAttributeType('image')) %}
use Magento\Framework\Data\Collection\AbstractDb as DbCollection;
use Magento\Framework\Exception\LocalizedException;
use Magento\Framework\Model\Context;
use Magento\Framework\Model\ResourceModel\AbstractResource;
use Magento\Framework\Registry;
{% endif %}
{% if entity.getAttributesWithTypeConfig('has_options')|length and entity.hasFrontend() %}
use Magento\Framework\Option\ArrayInterface;
{% endif %}

/**
 * @method \{{ module.getNamespace() }}\{{ module.getModuleName() }}\Model\ResourceModel\Page _getResource()
 * @method \{{ module.getNamespace() }}\{{ module.getModuleName() }}\Model\ResourceModel\Page getResource()
 */
class {{ entity.getNameSingular()|ucfirst }} extends AbstractModel implements {{ entity.getNameSingular()|ucfirst }}Interface
{
    /**
     * Cache tag
     *
     * @var string
     */
    const CACHE_TAG = '{{ module.getNamespace()|lower }}_{{ module.getModuleName()|lower }}_{{ entity.getNameSingular()|snake }}';
    /**
     * Cache tag
     *
     * @var string
     */
    protected $_cacheTag = self::CACHE_TAG;
    /**
     * Event prefix
     *
     * @var string
     */
    protected $_eventPrefix = '{{ module.getNamespace()|lower }}_{{ module.getModuleName()|lower }}_{{ entity.getNameSingular()|snake }}';
    /**
     * Event object
     *
     * @var string
     */
    protected $_eventObject = '{{ entity.getNameSingular()|snake }}';
{% if entity.hasAttributeType('file') or entity.hasAttributeType('image') %}
    /**
     * Uploader pool
     *
     * @var UploaderPool
     */
    protected $uploaderPool;
{% endif %}
{% if entity.hasAttributeType('wysiwyg') and (entity.getFrontendView() or entity.getFrontendList()) %}
    /**
     * @var Output
     */
    protected $outputProcessor;
{% endif %}
{% if entity.getAttributesWithTypeConfig('has_options')|length and entity.hasFrontend() %}
    /**
     * @var ArrayInterface[]
     */
    protected $optionProviders;
{% endif %}
{% if (entity.hasAttributeType('wysiwyg') and (entity.getFrontendView() or entity.getFrontendList())) or ( entity.hasAttributeType('file') or entity.hasAttributeType('image')) %}
    /**
     * constructor
     * @param Context $context
     * @param Registry $registry
{% if  entity.hasAttributeType('file') or entity.hasAttributeType('image') %}
     * @param UploaderPool $uploaderPool
{% endif %}
{% if entity.hasAttributeType('wysiwyg') and (entity.getFrontendView() or entity.getFrontendList())  %}
     * @param Output $outputProcessor,
{% endif %}
{% if entity.getAttributesWithTypeConfig('has_options')|length and entity.hasFrontend() %}
     * @param array $optionProviders
{% endif %}
     * @param AbstractResource $resource
     * @param DbCollection $resourceCollection
     * @param array $data
     */
    public function __construct(
        Context $context,
        Registry $registry,
{% if  entity.hasAttributeType('file') or entity.hasAttributeType('image') %}
        UploaderPool $uploaderPool,
{% endif %}
{% if entity.hasAttributeType('wysiwyg') and (entity.getFrontendView() or entity.getFrontendList())  %}
        Output $outputProcessor,
{% endif %}
{% if entity.getAttributesWithTypeConfig('has_options')|length and entity.hasFrontend() %}
        array $optionProviders = [],
{% endif %}
        AbstractResource $resource = null,
        DbCollection $resourceCollection = null,
        array $data = []
    ) {
{% if  entity.hasAttributeType('file') or entity.hasAttributeType('image') %}
        $this->outputProcessor = $outputProcessor;
{% endif %}
{% if entity.hasAttributeType('wysiwyg') and (entity.getFrontendView() or entity.getFrontendList())  %}
        $this->uploaderPool = $uploaderPool;
{% endif %}
{% if entity.getAttributesWithTypeConfig('has_options')|length and entity.hasFrontend() %}
        $this->optionProviders = $optionProviders;
{% endif %}
        parent::__construct($context, $registry, $resource, $resourceCollection, $data);
    }
{% endif %}
    /**
     * Initialize resource model
     *
     * @return void
     */
    protected function _construct()
    {
        $this->_init({{ entity.getNameSingular()|ucfirst }}ResourceModel::class);
    }

    /**
     * Get identities
     *
     * @return array
     */
    public function getIdentities()
    {
        return [self::CACHE_TAG . '_' . $this->getId()];
    }

    /**
     * Get Page id
     *
     * @return array
     */
    public function get{{ entity.getNameSingular()|ucfirst }}Id()
    {
        return $this->getData({{ entity.getNameSingular()|ucfirst }}Interface::{{ entity.getNameSingular()|snake|upper }}_ID);
    }

    /**
     * set {{ entity.getLabelSingular() }} id
     *
     * @param  int ${{ entity.getNameSingular()|camel }}Id
     * @return {{ entity.getNameSingular()|ucfirst }}Interface
     */
    public function set{{ entity.getNameSingular()|ucfirst }}Id(${{ entity.getNameSingular()|camel }}Id)
    {
        return $this->setData({{ entity.getNameSingular()|ucfirst }}Interface::{{ entity.getNameSingular()|snake|upper }}_ID, ${{ entity.getNameSingular()|camel }}Id);
    }
{% for attribute in entity.getAttributes() %}

    /**
     * @param {{ attribute.getTypeInstance().getTypeHint() }} ${{ attribute.getCode()|camel}}
     * @return {{ entity.getNameSingular()|ucfirst }}Interface
     */
    public function set{{ attribute.getCode()|camel|ucfirst }}(${{ attribute.getCode()|camel}})
    {
        return $this->setData({{ entity.getNameSingular()|ucfirst }}Interface::{{ attribute.getCode()|upper}}, ${{ attribute.getCode()|camel}});
    }

    /**
     * @return {{ attribute.getTypeInstance().getTypeHint() }}
     */
    public function get{{ attribute.getCode()|camel|ucfirst }}()
    {
        return $this->getData({{ entity.getNameSingular()|ucfirst }}Interface::{{ attribute.getCode()|upper}});
    }
{% endfor %}
{% if entity.getStore() %}
    /**
     * @param array $storeId
     * @return {{ entity.getNameSingular()|ucfirst }}Interface
     */
    public function setStoreId(array $storeId)
    {
        return $this->setData({{ entity.getNameSingular()|ucfirst }}Interface::STORE_ID, $storeId);
    }

    /**
    * @return int[]
    */
    public function getStoreId()
    {
        return $this->getData({{ entity.getNameSingular()|ucfirst }}Interface::STORE_ID);
    }
{% endif %}
{% if entity.getSeo() %}

    /**
     * @param string $metaTitle
     * @return {{ entity.getNameSingular()|ucfirst }}Interface
     */
    public function setMetaTitle($metaTitle)
    {
        return $this->setData({{ entity.getNameSingular()|ucfirst }}Interface::META_TITLE, $metaTitle);
    }

    /**
     * @return string
     */
    public function getMetaTitle()
    {
        return $this->getData({{ entity.getNameSingular()|ucfirst }}Interface::META_TITLE);
    }

    /**
     * @param string $metaDescription
     * @return {{ entity.getNameSingular()|ucfirst }}Interface
     */
    public function setMetaDescription($metaDescription)
    {
        return $this->setData({{ entity.getNameSingular()|ucfirst }}Interface::META_DESCRIPTION, $metaDescription);
    }

    /**
     * @return string
     */
    public function getMetaDescription()
    {
        return $this->getData({{ entity.getNameSingular()|ucfirst }}Interface::META_DESCRIPTION);
    }

    /**
     * @param string $metaKeywords
     * @return {{ entity.getNameSingular()|ucfirst }}Interface
     */
    public function setMetaKeywords($metaKeywords)
    {
        return $this->setData({{ entity.getNameSingular()|ucfirst }}Interface::META_KEYWORDS, $metaKeywords);
    }

    /**
     * @return string
     */
    public function getMetaKeywords()
    {
        return $this->getData({{ entity.getNameSingular()|ucfirst }}Interface::META_KEYWORDS);
    }
{% endif %}
{% if entity.getFrontendList() or entity.getFrontendView() %}

    /**
     * @param int $isActive
     * @return {{ entity.getNameSingular()|ucfirst }}Interface
     */
    public function setIsActive($isActive)
    {
        return $this->setData({{ entity.getNameSingular()|ucfirst }}Interface::IS_ACTIVE, $isActive);
    }

    /**
     * @return int
     */
    public function getIsActive()
    {
        return $this->getData({{ entity.getNameSingular()|ucfirst }}Interface::IS_ACTIVE);
    }
{% endif %}
{% for attribute in entity.getAttributes() %}
{% if attribute.getType() == 'image' or attribute.getType() == 'file' %}

    /**
     * @return bool|string
     * @throws LocalizedException
     */
    public function get{{ attribute.getCode()|camel|ucfirst }}Url()
    {
        $url = false;
        ${{ attribute.getCode()|camel }} = $this->get{{ attribute.getCode()|camel|ucfirst }}();
        if (${{ attribute.getCode()|camel }}) {
            if (is_string(${{ attribute.getCode()|camel }})) {
                $uploader = $this->uploaderPool->getUploader('{{ attribute.getType() }}');
                $url = $uploader->getBaseUrl() . $uploader->getBasePath() . ${{ attribute.getCode()|camel }};
            } else {
                throw new LocalizedException(
                    __('Something went wrong while getting the {{ attribute.getLabel()|ucfirst }} url.')
                );
            }
        }
        return $url;
    }
{% endif %}
{% if attribute.getType() == 'wysiwyg' and (entity.getFrontendList() or entity.getFrontendView())  %}

    /**
     * @return bool|string
     * @throws LocalizedException
     */
    public function get{{ attribute.getCode()|camel|ucfirst }}Html()
    {
        return $this->outputProcessor->filterOutput($this->get{{ attribute.getCode()|camel|ucfirst }}());
    }
{% endif %}
{% endfor %}
{% if entity.getAttributesWithTypeConfig('multiple')|length %}
    /**
     * @return array
     */
    private function getMultiSelectFields()
    {
        return [
{{ entity.getAttributesWithTypeConfigString('multiple', 3)|raw }}
        ];
    }

    /**
     * @return AbstractModel|$this
     */
    public function beforeSave()
    {
        foreach ($this->getMultiSelectFields() as $field) {
            if (is_array($this->getData($field))) {
                $this->setData($field, implode(',', $this->getData($field)));
            }
        }
        return parent::beforeSave();
    }

    /**
     * @return AbstractModel|$this
     */
    public function afterLoad()
    {
        foreach ($this->getMultiSelectFields() as $field) {
            if (!is_array($this->getData($field))) {
                $this->setData($field, explode(',', $this->getData($field)));
            }
        }
        return parent::afterLoad();
    }
{% endif %}
{% if entity.getAttributesWithTypeConfig('has_options')|length and entity.hasFrontend() %}
    /**
     * @param $attribute
     * @return string
     */
    public function getAttributeText($attribute)
    {
        if (!isset($this->optionProviders[$attribute])) {
            return '';
        }
        if (!($this->optionProviders[$attribute] instanceof ArrayInterface)) {
            return '';
        }
        $value = $this->getData($attribute);
        if (!is_array($value)) {
            $value = explode(',', $value);
        }
        $keyValuePair = array_filter(
            $this->optionProviders[$attribute]->toOptionArray(),
            function ($item) use ($value) {
                return in_array($item['value'], $value);
            }
        );
        return implode(
            ', ',
            array_map(
                function ($item) {
                    return $item['label'];
                },
                $keyValuePair
            )
        );
    }
{% endif %}
{% if entity.getIsTree() %}
    /**
     * @param int $position
     * @return {{ entity.getNameSingular()|ucfirst }}Interface
     */
    public function setPosition($position)
    {
        return $this->setData({{ entity.getNameSingular()|ucfirst }}Interface::POSITION, $position);
    }

    /**
     * @return int
     */
    public function getPosition()
    {
        return $this->getData({{ entity.getNameSingular()|ucfirst }}Interface::POSITION);
    }

    /**
     * @param int $level
     * @return {{ entity.getNameSingular()|ucfirst }}Interface
     */
    public function setLevel($level)
    {
        return $this->setData({{ entity.getNameSingular()|ucfirst }}Interface::LEVEL, $level);
    }

    /**
     * @return int
     */
    public function getLevel()
    {
        return $this->getData({{ entity.getNameSingular()|ucfirst }}Interface::LEVEL);
    }

    /**
     * @param string $path
     * @return {{ entity.getNameSingular()|ucfirst }}Interface
     */
    public function setPath($path)
    {
        return $this->setData({{ entity.getNameSingular()|ucfirst }}Interface::PATH, $path);
    }

    /**
     * @return string
     */
    public function getPath()
    {
        return $this->getData({{ entity.getNameSingular()|ucfirst }}Interface::PATH);
    }

    /**
     * @param int $parentId
     * @return {{ entity.getNameSingular()|ucfirst }}Interface
     */
    public function setParentId($parentId)
    {
        return $this->setData({{ entity.getNameSingular()|ucfirst }}Interface::PARENT_ID, $parentId);
    }

    /**
     * @return int
     */
    public function getParentId()
    {
        return $this->getData({{ entity.getNameSingular()|ucfirst }}Interface::PARENT_ID);
    }
{% endif %}
}
