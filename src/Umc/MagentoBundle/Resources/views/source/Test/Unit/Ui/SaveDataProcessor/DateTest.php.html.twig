{% if not module.isUmcCrud() and module.hasEntitiesWithFlag('attribute_processor_save_date') %}
<?php{{ formatLicense(module, 'php')|raw }}
declare(strict_types=1);

namespace {{ module.getNamespace() }}\{{ module.getModuleName() }}\Test\Unit\Ui\SaveDataProcessor;

{{ sortStart() }}
use Magento\Framework\Stdlib\DateTime\Filter\Date as DateFilter;
use PHPUnit\Framework\MockObject\MockObject;
use PHPUnit\Framework\TestCase;
use {{ module.getNamespace() }}\{{ module.getModuleName() }}\Ui\SaveDataProcessor\Date;
{{ sortEnd() }}

class DateTest extends TestCase
{
    /**
     * @var \Zend_Filter_InputFactory | MockObject
     */
    private $filterFactory;
    /**
     * @var DateFilter | MockObject
     */
    private $dateFilter;
    /**
     * @var \Zend_Filter_Input | MockObject
     */
    private $filter;
    /**
     * @var Date
     */
    private $date;

    /**
     * setup tests
     */
    protected function setUp(){{ extraVars.setUpReturnType }}
    {
        $this->filterFactory = $this->createMock(\Zend_Filter_InputFactory::class);
        $this->dateFilter = $this->createMock(DateFilter::class);
        $this->filter = $this->createMock(\Zend_Filter_Input::class);
        $this->date = new Date(
            ['field1', 'field2', 'field3'],
            $this->filterFactory,
            $this->dateFilter
        );
    }

    /**
     * @covers \{{ module.getNamespace() }}\{{ module.getModuleName() }}\Ui\SaveDataProcessor\Date
     */
    public function testModifyData()
    {
        $data = [
            'field1' => '2020-01-01',
            'field2' => '2021-01-01',
        ];
        $expectedFactoryData = [
            'filterRules' => [
                'field1' => $this->dateFilter,
                'field2' => $this->dateFilter
            ],
            'validatorRules' => [],
            'data' => $data
        ];
        $this->filterFactory->expects($this->once())->method('create')
            ->with($expectedFactoryData)
            ->willReturn($this->filter);
        $this->filter->expects($this->once())->method('getUnescaped')->willReturn(['result']);
        $this->assertEquals(['result'], $this->date->modifyData($data));
    }
}
{% endif %}
