{% if not module.isUmcCrud() %}
<?php{{ module.getFormattedLicense('php') }}
declare(strict_types=1);

namespace {{ module.getNamespace() }}\{{ module.getModuleName() }}\Model;

use {{ module.getNamespace() }}\{{ module.getModuleName() }}\Api\Data\{{ entity.getNameSingular()|camel|ucfirst }}Interface;
use {{ module.getNamespace() }}\{{ module.getModuleName() }}\Api\Data\{{ entity.getNameSingular()|camel|ucfirst }}InterfaceFactory;
use {{ module.getNamespace() }}\{{ module.getModuleName() }}\Api\{{ entity.getNameSingular()|camel|ucfirst }}RepositoryInterface;
use {{ module.getNamespace() }}\{{ module.getModuleName() }}\Model\ResourceModel\{{ entity.getNameSingular()|camel|ucfirst }} as {{ entity.getNameSingular()|camel|ucfirst }}ResourceModel;

class {{ entity.getNameSingular()|camel|ucfirst }}Repo implements {{ entity.getNameSingular()|camel|ucfirst }}RepositoryInterface
{
    /**
     * @var {{ entity.getNameSingular()|camel|ucfirst }}InterfaceFactory
     */
    private $factory;
    /**
     * @var {{ entity.getNameSingular()|camel|ucfirst }}ResourceModel
     */
    private $resource;
    /**
     * @var {{ entity.getNameSingular()|camel|ucfirst }}Interface[]
     */
    private $cache = [];

    /**
     *
     */
    public function __construct(
        {{ entity.getNameSingular()|camel|ucfirst }}InterfaceFactory $factory,
        {{ entity.getNameSingular()|camel|ucfirst }}ResourceModel $resource
    ) {
        $this->factory = $factory;
        $this->resource = $resource;
    }

    /**
     * @inheritdoc
     */
    public function save({{ entity.getNameSingular()|camel|ucfirst }}Interface ${{ entity.getNameSingular()|camel }})
    {
        try {
            $this->resource->save(${{ entity.getNameSingular()|camel }});
        } catch (\Exception $exception) {
            throw new \Magento\Framework\Exception\CouldNotSaveException(
                __($exception->getMessage())
            );
        }
        return ${{ entity.getNameSingular()|camel }};
    }

    /**
     * @inheritdoc
     */
    public function get(int ${{ entity.getPk()|camel }})
    {
        if (!isset($this->cache[${{ entity.getPk()|camel }}])) {
            ${{ entity.getNameSingular()|camel }} = $this->factory->create();
            $this->resource->load(${{ entity.getNameSingular()|camel }}, ${{ entity.getPk()|camel }});
            if (!${{ entity.getNameSingular()|camel }}->getId()) {
                throw new \Magento\Framework\Exception\NoSuchEntityException(
                    __('The {{ entity.getLabelSingular() }} with the ID "%1" does not exist . ', ${{ entity.getPk()|camel }})
                );
            }
            $this->cache[${{ entity.getPk()|camel }}] = ${{ entity.getNameSingular()|camel }};
        }
        return $this->cache[${{ entity.getPk()|camel }}];
    }

    /**
     * @inheritdoc
     */
    public function delete({{ entity.getNameSingular()|camel|ucfirst }}Interface ${{ entity.getNameSingular()|camel }})
    {
        try {
            $this->resource->delete(${{ entity.getNameSingular()|camel }});
            unset($this->cache[$id]);
        } catch (\Exception $exception) {
            throw new \Magento\Framework\Exception\CouldNotDeleteException(
                __($exception->getMessage())
            );
        }
        return true;
    }

    /**
     * @inheritdoc
     */
    public function deleteById(int ${{ entity.getPk()|camel }})
    {
        return $this->delete($this->get(${{ entity.getPk()|camel }}));
    }

    /**
     * @inheritdoc
     */
    public function clear()
    {
        return $this->cache = [];
    }
}
{% endif %}
