<?php{{ module.getFormattedLicense('php')|raw }}
declare(strict_types=1);

namespace {{ module.getNamespace() }}\{{ module.getModuleName() }}\Model;

use {{ entity.getInterface() }};
use Magento\Framework\Model\AbstractModel;
{% if entity.hasAttributesWithType('dynamic') %}
use Magento\Framework\Data\Collection\AbstractDb;
use Magento\Framework\Registry;
use Magento\Framework\Serialize\Serializer\Json;
use Magento\Framework\Model\Context;
use Magento\Framework\Model\ResourceModel\AbstractResource;
{% endif %}
use {{ module.getNamespace() }}\{{ module.getModuleName() }}\Model\ResourceModel\{{ entity.getNameSingular()|camel|ucfirst }} as {{ entity.getNameSingular()|camel|ucfirst }}ResourceModel;

class {{ entity.getNameSingular()|camel|ucfirst }} extends AbstractModel implements {{ entity.getNameSingular()|camel|ucfirst }}Interface
{
    /**
     * Cache tag
     *
     * @var string
     */
    public const CACHE_TAG = '{{ module.getNamespace()|lower }}_{{ module.getModuleName()|lower }}_{{ entity.getNameSingular()|snake }}';
    /**
     * Cache tag
     *
     * @var string
     * phpcs:disable PSR2.Classes.PropertyDeclaration.Underscore,PSR12.Classes.PropertyDeclaration.Underscore
     */
    protected $_cacheTag = self::CACHE_TAG;
    /**
     * Event prefix
     *
     * @var string
     */
    protected $_eventPrefix = '{{ module.getNamespace()|lower }}_{{ module.getModuleName()|lower }}_{{ entity.getNameSingular()|snake }}';
    /**
     * Event object
     *
     * @var string
     */
    protected $_eventObject = '{{ entity.getNameSingular()|snake }}';
    //phpcs:enable
{% if entity.hasAttributesWithType('dynamic') %}
    /**
     * @var Json
     */
    private $json;
{% endif %}
    /**
     * Initialize resource model
     *
     * @return void
     * phpcs:disable PSR2.Methods.MethodDeclaration.Underscore,PSR12.Methods.MethodDeclaration.Underscore
     */
    protected function _construct()
    {
        $this->_init({{ entity.getNameSingular()|camel|ucfirst }}ResourceModel::class);
        //phpcs:enable
    }

{% if entity.hasAttributesWithType('dynamic') %}
    /**
     * {{ entity.getNameSingular()|camel|ucfirst }} constructor.
     * @param Context $context
     * @param Registry $registry
     * @param Json $json
     * @param AbstractResource $resource
     * @param AbstractDb|null $resourceCollection
     * @param array $data
     */
    public function __construct(
        Context $context,
        Registry $registry,
        Json $json,
        AbstractResource $resource = null,
        AbstractDb $resourceCollection = null,
        array $data = []
    ) {
        $this->json = $json;
        parent::__construct($context, $registry, $resource, $resourceCollection, $data);
    }

{% endif %}
    /**
     * Get {{ entity.getLabelSingular() }} id
     *
     * @return array
     */
    public function get{{ entity.getNameSingular()|camel|ucfirst }}Id()
    {
        return $this->getData({{ entity.getNameSingular()|camel|ucfirst }}Interface::{{ entity.getNameSingular()|snake|upper }}_ID);
    }

    /**
     * set {{ entity.getLabelSingular() }} id
     *
     * @param  int ${{ entity.getPk()|camel }}
     * @return {{ entity.getNameSingular()|camel|ucfirst }}Interface
     */
    public function set{{ entity.getNameSingular()|camel|ucfirst }}Id(${{ entity.getNameSingular()|camel }}Id)
    {
        return $this->setData({{ entity.getNameSingular()|camel|ucfirst }}Interface::{{ entity.getNameSingular()|snake|upper }}_ID, ${{ entity.getNameSingular()|camel }}Id);
    }
{% for attribute in entity.getAttributes() %}
{{ attribute.getTypeInstance().renderTemplate('model')|raw }}
{% endfor %}
{% if entity.isStore() %}
    /**
     * @param array $storeId
     * @return {{ entity.getNameSingular()|camel|ucfirst }}Interface
     */
    public function setStoreId($storeId)
    {
        return $this->setData({{ entity.getNameSingular()|camel|ucfirst }}Interface::STORE_ID, $storeId);
    }

    /**
     * @return int[]
     */
    public function getStoreId()
    {
        return $this->getData({{ entity.getNameSingular()|camel|ucfirst }}Interface::STORE_ID);
    }
{% endif %}
{% if entity.isSeo() %}
    /**
     * @param string $metaTitle
     * @return {{ entity.getNameSingular()|camel|ucfirst }}Interface
     */
    public function setMetaTitle($metaTitle)
    {
        return $this->setData({{ entity.getNameSingular()|camel|ucfirst }}Interface::META_TITLE, $metaTitle);
    }

    /**
     * @return string
     */
    public function getMetaTitle()
    {
        return $this->getData({{ entity.getNameSingular()|camel|ucfirst }}Interface::META_TITLE);
    }

    /**
     * @param string $metaDescription
     * @return {{ entity.getNameSingular()|camel|ucfirst }}Interface
     */
    public function setMetaDescription($metaDescription)
    {
        return $this->setData({{ entity.getNameSingular()|camel|ucfirst }}Interface::META_DESCRIPTION, $metaDescription);
    }

    /**
     * @return string
     */
    public function getMetaDescription()
    {
        return $this->getData({{ entity.getNameSingular()|camel|ucfirst }}Interface::META_DESCRIPTION);
    }

    /**
     * @param string $metaKeywords
     * @return {{ entity.getNameSingular()|camel|ucfirst }}Interface
     */
    public function setMetaKeywords($metaKeywords)
    {
        return $this->setData({{ entity.getNameSingular()|camel|ucfirst }}Interface::META_KEYWORDS, $metaKeywords);
    }

    /**
     * @return string
     */
    public function getMetaKeywords()
    {
        return $this->getData({{ entity.getNameSingular()|camel|ucfirst }}Interface::META_KEYWORDS);
    }
{% endif %}
{% if entity.isFrontend() %}

    /**
     * @param int $isActive
     * @return {{ entity.getNameSingular()|camel|ucfirst }}Interface
     */
    public function setIsActive($isActive)
    {
        return $this->setData({{ entity.getNameSingular()|camel|ucfirst }}Interface::IS_ACTIVE, $isActive);
    }

    /**
     * @return int
     */
    public function getIsActive()
    {
        return $this->getData({{ entity.getNameSingular()|camel|ucfirst }}Interface::IS_ACTIVE);
    }
{% endif %}

    /**
     * Get identities
     *
     * @return array
     */
    public function getIdentities()
    {
        return [self::CACHE_TAG . '_' . $this->getId()];
    }
}
